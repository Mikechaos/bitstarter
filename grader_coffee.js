#!/usr/bin/env node 
// Produce by make-ic-scripts task
// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var $, CHECKSFILE_DEFAULT, HTMLFILE_DEFAULT, assertFileExists, checkHtml, checkHtmlFile, checkHtmlFilecontent, cheerio, clone, content, fs, get_async_content, get_content, get_url_content, loadChecks, make_autoclear_async, outJson, program, read_url, rest, sys, test;



  #!/usr/bin/env node;

  $ = {};

  fs = require('fs');

  program = require('commander');

  cheerio = require('cheerio');

  HTMLFILE_DEFAULT = "index.html";

  CHECKSFILE_DEFAULT = "checks.json";

  sys = require('util');

  rest = require('restler');

  test = {};

  get_url_content = function(content) {
    if (arguments.length === 0) {
      return this.result;
    }
    return this.result = content;
  };

  read_url = function(url) {
    var ret_result;
    return ret_result = rest.get(url).on('complete', function(result) {
      if (result instanceof Error) {
        sys.puts('Error: ' + result.message);
        return this.retry(5000);
      } else {
        return get_url_content(result);
      }
    });
  };

  assertFileExists = function(infile) {
    var instr;
    instr = infile.toString();
    if (!fs.existsSync(infile)) {
      console.log("%s does not exist. Exiting", instr);
      process.exit(1);
    }
    return instr;
  };

  loadChecks = function(checksfile) {
    return JSON.parse(fs.readFileSync(checksfile));
  };

  checkHtmlFile = function(content, checksfile) {
    var checks, out, presence, tag, _i, _len;
    $ = cheerio.load(content);
    checks = loadChecks(checksfile).sort();
    out = {};
    presence = function(tag) {
      return $(tag).length > 0;
    };
    for (_i = 0, _len = checks.length; _i < _len; _i++) {
      tag = checks[_i];
      out[tag] = presence(tag);
    }
    return out;
  };

  clone = function(fn) {
    return fn.bind({});
  };

  make_autoclear_async = function(predicate, body, elapse) {
    var int;
    if (body == null) {
      body = (function() {});
    }
    if (elapse == null) {
      elapse = 500;
    }
    return int = setInterval(function() {
      if (predicate.call(null)) {
        clearInterval(int);
        return body.call(null, int);
      }
    }, elapse);
  };

  get_async_content = function(url) {
    read_url(url);
    return make_autoclear_async(get_url_content);
  };

  if (require.main === module) {
    program.option('-c, --checks <check_file>', 'Path to checks.json', clone(assertFileExists), CHECKSFILE_DEFAULT).option('-f, --file <html_file>', 'Path to index.html', clone(assertFileExists), HTMLFILE_DEFAULT).option('-u, --url <url_to_file', 'Url to html file').parse(process.argv);
    if (program.url !== void 0) {
      get_async_content(program.url);
    } else {
      content = fs.readFileSync(program.file);
    }
    get_content = function() {
      return content || get_url_content();
    };
    checkHtml = function() {
      var check, outJson;
      check = checkHtmlFile(get_content(), program.checks);
      outJson = JSON.stringify(check, null, 4);
      return console.log(outJson);
    };
    outJson = make_autoclear_async(get_content, checkHtml);
  } else {
    exports.checkHtmlFile = checkHtmlFilecontent = Fs.readFileSync(Program.file);
  }

}).call(this);
