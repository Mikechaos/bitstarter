#!/usr/bin/env node

// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var $, CHECKSFILE_DEFAULT, HTMLFILE_DEFAULT, assertFileExists, check, checkHtmlFile, checkHtmlFilecontent, cheerio, clone, content, fs, get_content, iced, loadChecks, outJson, program, read_url, rest, sys, __iced_deferrals, __iced_k, __iced_k_noop,
    _this = this;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  $ = {};

  fs = require('fs');

  program = require('commander');

  cheerio = require('cheerio');

  HTMLFILE_DEFAULT = "index.html";

  CHECKSFILE_DEFAULT = "checks.json";

  sys = require('util');

  rest = require('restler');

  read_url = function(url, cb) {
    return rest.get(url).on('complete', function(result) {
      if (result instanceof Error) {
        sys.puts('Error: ' + result.message);
        return this.retry(5000);
      } else {
        return cb(result);
      }
    });
  };

  assertFileExists = function(infile) {
    var instr;
    instr = infile.toString();
    if (!fs.existsSync(infile)) {
      console.log("%s does not exist. Exiting", instr);
      process.exit(1);
    }
    return instr;
  };

  loadChecks = function(checksfile) {
    return JSON.parse(fs.readFileSync(checksfile));
  };

  checkHtmlFile = function(content, checksfile) {
    var checks, out, presence, tag, _i, _len;
    $ = cheerio.load(content);
    checks = loadChecks(checksfile).sort();
    out = {};
    presence = function(tag) {
      return $(tag).length > 0;
    };
    for (_i = 0, _len = checks.length; _i < _len; _i++) {
      tag = checks[_i];
      out[tag] = presence(tag);
    }
    return out;
  };

  clone = function(fn) {
    return fn.bind({});
  };

  get_content = function(autocb) {
    var content, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = autocb;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (program.url != null) {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "grader_iced.iced",
          funcname: "get_content"
        });
        read_url(program.url, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return content = arguments[0];
            };
          })(),
          lineno: 40
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return __iced_k(content);
      });
    } else {
      return __iced_k(fs.readFileSync(program.file));
    }
  };

  if (require.main === module) {
    program.option('-c, --checks <check_file>', 'Path to checks.json', clone(assertFileExists), CHECKSFILE_DEFAULT).option('-f, --file <html_file>', 'Path to index.html', clone(assertFileExists), HTMLFILE_DEFAULT).option('-u, --url <url_to_file', 'Url to html file').parse(process.argv);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        filename: "grader_iced.iced"
      });
      get_content(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return content = arguments[0];
          };
        })(),
        lineno: 52
      }));
      __iced_deferrals._fulfill();
    })(function() {
      check = checkHtmlFile(content, program.checks);
      outJson = JSON.stringify(check, null, 4);
      return __iced_k(sys.puts(outJson));
    });
  } else {
        exports.checkHtmlFile = checkHtmlFilecontent = Fs.readFileSync(Program.file);
    __iced_k();;
  }

}).call(this);
